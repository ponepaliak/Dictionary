// <auto-generated />
using System;
using Dictionary.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Dictionary.Migrations
{
    [DbContext(typeof(DictionaryContext))]
    [Migration("20230226144342_InitialCreation")]
    partial class InitialCreation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Dictionary.Models.Language", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Dictionary.Models.Session", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("Added")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Dictionary.Models.SessionSet", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("SessionID")
                        .HasColumnType("int");

                    b.Property<bool>("WasShowedOnFirstLang")
                        .HasColumnType("bit");

                    b.Property<bool>("WasShowedOnSecondLang")
                        .HasColumnType("bit");

                    b.Property<bool>("WasSuccessfulOnFirstLang")
                        .HasColumnType("bit");

                    b.Property<bool>("WasSuccessfulOnSecondLang")
                        .HasColumnType("bit");

                    b.Property<int>("WordsPairID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("SessionID");

                    b.HasIndex("WordsPairID");

                    b.ToTable("SessionSets");
                });

            modelBuilder.Entity("Dictionary.Models.Tag", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Dictionary.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Dictionary.Models.WordsPair", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Added")
                        .HasColumnType("datetime2");

                    b.Property<int>("AttemptsNumber")
                        .HasColumnType("int");

                    b.Property<int>("FirstLanguageID")
                        .HasColumnType("int");

                    b.Property<string>("FirstWord")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Priority")
                        .HasColumnType("tinyint");

                    b.Property<int>("ProblemLevel")
                        .HasColumnType("int");

                    b.Property<int>("SecondLanguageID")
                        .HasColumnType("int");

                    b.Property<string>("SecondWord")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FirstLanguageID");

                    b.HasIndex("SecondLanguageID");

                    b.HasIndex("UserID");

                    b.ToTable("WordsPairs");
                });

            modelBuilder.Entity("WordsPairTag", b =>
                {
                    b.Property<int>("TagID")
                        .HasColumnType("int");

                    b.Property<int>("WordsPairID")
                        .HasColumnType("int");

                    b.HasKey("TagID", "WordsPairID");

                    b.HasIndex("WordsPairID");

                    b.ToTable("WordsPairTag", (string)null);
                });

            modelBuilder.Entity("Dictionary.Models.Session", b =>
                {
                    b.HasOne("Dictionary.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dictionary.Models.SessionSet", b =>
                {
                    b.HasOne("Dictionary.Models.Session", "Session")
                        .WithMany("SessionSets")
                        .HasForeignKey("SessionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dictionary.Models.WordsPair", "WordsPair")
                        .WithMany()
                        .HasForeignKey("WordsPairID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Session");

                    b.Navigation("WordsPair");
                });

            modelBuilder.Entity("Dictionary.Models.Tag", b =>
                {
                    b.HasOne("Dictionary.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dictionary.Models.WordsPair", b =>
                {
                    b.HasOne("Dictionary.Models.Language", "FirstLanguage")
                        .WithMany()
                        .HasForeignKey("FirstLanguageID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Dictionary.Models.Language", "SecondLanguage")
                        .WithMany()
                        .HasForeignKey("SecondLanguageID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Dictionary.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FirstLanguage");

                    b.Navigation("SecondLanguage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WordsPairTag", b =>
                {
                    b.HasOne("Dictionary.Models.WordsPair", null)
                        .WithMany()
                        .HasForeignKey("TagID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Dictionary.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("WordsPairID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Dictionary.Models.Session", b =>
                {
                    b.Navigation("SessionSets");
                });
#pragma warning restore 612, 618
        }
    }
}
